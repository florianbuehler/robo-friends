{"version":3,"sources":["components/ErrorBoundary.js","components/SearchBox.js","components/Card.js","components/CardList.js","constants.js","App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","children","Component","SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robots","map","robot","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","a","fetch","res","json","users","useEffect","filteredRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97d7f9b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport 'tachyons';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport 'tachyons';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 w-auto\">\n      <img src={`https://robohash.org/${id}?size=275x275`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport 'tachyons';\n\nconst CardList = ({ robots }) => {\n  return (\n    <ul className=\"list flex flex-wrap pa0 justify-center\">\n      {robots.map((robot) => (\n        <li key={robot.id}>\n          <Card id={robot.id} name={robot.name} email={robot.email} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default CardList;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport SearchBox from './components/SearchBox';\nimport CardList from './components/CardList';\nimport { requestRobots, setSearchField } from './actions';\n\n// styles\nimport './App.css';\nimport 'tachyons';\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nconst App = (props) => {\n  const { searchField, onSearchChange, robots, isPending, onRequestRobots } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  if (isPending) {\n    return <h1>Loading...</h1>;\n  } else {\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  try {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await res.json();\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users });\n  } catch (error) {\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n  }\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        error: action.payload,\n        isPending: false\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger/src';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}